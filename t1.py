    def __staff_run_group_stage(self, input_dir, output_dir, num_workers):
        # Loop through input directory and get all the files generated in Map stage
        filenames = []

        for in_filename in os.listdir(input_dir):
            filename = input_dir + in_filename

            # Open file, sort it now to ease the merging load later
            with open(filename, 'r') as f_in:
                content = sorted(f_in)

            # Write it back into the same file
            with open(filename, 'w+') as f_out:
                f_out.writelines(content)

            # Remember it in our list
            filenames.append(filename)

        # Create a new file to store ALL the sorted tuples in one single
        sorted_output_filename = os.path.join(output_dir, 'sorted.out')
        sorted_output_file = open(sorted_output_filename, 'w+')

        # Open all files in a single map command! Python is cool like that!
        files = map(open, filenames)

        # Loop through all merged files and write to our single file above
        for line in heapq.merge(*files):
            sorted_output_file.write(line)

        sorted_output_file.close()

        # Create a circular buffer to distribute file among number of workers
        grouper_filenames = []
        grouper_fhs = collections.deque(maxlen=num_workers)

        for i in range(num_workers):
            # Create temp file names
            basename = "file{0:0>4}.out".format(i)
            filename = os.path.join(output_dir, basename)

            # Open files for each worker so we can write to them in the next loop
            grouper_filenames.append(filename)
            fh = open(filename, 'w')
            grouper_fhs.append(fh)

        # Write lines to grouper output files, allocated by key
        prev_key = None
        sorted_output_file = open(os.path.join(output_dir, 'sorted.out'), 'r')

        for line in sorted_output_file:
            # Parse the line (must be two strings separated by a tab)
            tokens = line.rstrip().split("\t", 2)
            assert len(tokens) == 2, "Error: improperly formatted line"
            key, value = tokens

            # If it's a new key, then rotate circular queue of grouper files
            if prev_key != None and key != prev_key:
                grouper_fhs.rotate(1)

            # Write to grouper file
            fh = grouper_fhs[0]
            fh.write(line)

            # Update most recently seen key
            prev_key = key

        # Close grouper output file handles
        for fh in grouper_fhs:
            fh.close()

        # Delete the sorted output file
        sorted_output_file.close()
        os.remove(sorted_output_filename)

        # Return array of file names generated by grouper stage
        return grouper_filenames